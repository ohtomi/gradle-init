plugins {
  id 'java'
  id 'application'
  id 'eu.appsatori.fatjar' version '0.3'
}

/*
 * java plugin settings
 */
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

processResources {
  getProperty('native2ascii.target.extensions').tokenize(',').each {
    filesMatching('**/*.' + it) {
      filter(org.apache.tools.ant.filters.EscapeUnicode)
    }
  }
}

jar {
  baseName = myAppTitle
  version = myAppVersion

  manifest {
    attributes(
      'Main-Class': myAppMainClass,
      'Implementation-Title': myAppTitle,
      'Implementation-Version': myAppVersion)
  }
}

/*
 * application plugin settings
 */
applicationName = myAppTitle
mainClassName = myAppMainClass

/*
 * fatjar plugin settings
 */
fatJar {
  baseName = myAppTitle
  version myAppVersion
  classifier 'all-in-one'

  manifest {
    attributes(
      'Main-Class': myAppMainClass,
      'Implementation-Title': myAppTitle,
      'Implementation-Version': myAppVersion)
  }
}

/*
 * javac encoding settings
 */
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//tasks.withType(JavaCompile){ options.encoding = 'UTF-8' }

/*
 * dependency settings
 */
repositories {
  jcenter()
}

dependencies {
  compile 'org.slf4j:slf4j-api:1.7.12'
  compile 'ch.qos.logback:logback-classic:1.1.3'
  testCompile 'junit:junit:4.12'
}

/*
 * task definitions
 */
task initDirs(description: '''Creates 'java' and 'resources' directories under all sourceSets''') << {
  sourceSets*.java.srcDirs*.each {
    it.mkdirs()
  }
  sourceSets*.resources.srcDirs*.each {
    it.mkdirs()
  }
}
