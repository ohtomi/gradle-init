subprojects {

  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  /*
   * java plugin settings
   */
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  processResources {
    project.ext['native2ascii.target.extensions'].tokenize(',').each {
      filesMatching('**/*.' + it) {
        filter(org.apache.tools.ant.filters.EscapeUnicode)
      }
    }
  }

  test {
    maxParallelForks = 1
    forkEvery = 100
    minHeapSize = '128m'
    maxHeapSize = '128m'
    jvmArgs = ['-XX:+UseG1GC']
  }

  /*
   * checkstyle plugin settings
   */
  checkstyle {
    configFile = file("${rootDir}/gradle/checkstyle/sun_checks.xml")
    toolVersion = '6.7'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
  }

  /*
   * findbugs plugin settings
   */
  findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = true
    sourceSets = [sourceSets.main]
  }

  /*
   * jacoco plugin settings
   */
  jacoco {
    toolVersion = '0.7.5.201505241946'
  }

  /*
   * javac encoding settings
   */
  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  //tasks.withType(JavaCompile){ options.encoding = 'UTF-8' }

  /*
   * task definitions
   */
  apply from: "${rootDir}/gradle/integrationTest.gradle"

  task initDirs(description: '''Creates 'java' and 'resources' directories under all sourceSets''') << {
    sourceSets*.java.srcDirs*.each {
      it.mkdirs()
    }
    sourceSets*.resources.srcDirs*.each {
      it.mkdirs()
    }
  }

  tasks.addRule('''Pattern: copyProfileResource<ProfileName>: Copies the resource files of a profile.''') {
    taskName ->
    def profileName = taskName.replace('copyProfileResource', '').toLowerCase()
    if (taskName.startsWith('copyProfileResource')) {
      task (taskName, type: Copy) {
        from "profiles/${profileName}"
        into sourceSets.main.output.resourcesDir
      }
    }
  }
  def activeProfileName = myActiveProfile.substring(0, 1).toUpperCase() + \
                          myActiveProfile.substring(1).toLowerCase()
  def taskName = 'copyProfileResource' + activeProfileName
  classes.dependsOn taskName

}
